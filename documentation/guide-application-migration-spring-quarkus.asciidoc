:toc: macro
toc::[]

= Migrate from Spring to Quarkus

This guide will cover the migration process of a Spring application to a Quarkus application. There are already articles about migrating from Spring to Quarkus (e.g. https://developers.redhat.com/blog/2020/04/10/migrating-a-spring-boot-microservices-application-to-quarkus, https://dzone.com/articles/migrating-a-spring-boot-application-to-quarkus-cha). This guide will focus more on the devon4j specific aspects. We assume that a working Spring application exists, built in the link:guide-structure-classic.asciidoc[classic devon4j specific way] (e.g. https://github.com/devonfw/jump-the-queue/tree/master/java/jtqj[Jump The Queue]).

== Create the Quarkus application

We start with an empty Quarkus project. You can create the project with Maven on the command line or use the https://code.quarkus.io/[online generator]. The advantage of the online generator is that you have a pre-selection of dependencies to use in your project. For starters, let's select the basic dependencies needed to develop a REST service with database connectivity: __RESTEasy JAX-RS, RESTEasy Jackson, Hibernate ORM, Spring Data JPA API, JDBC Driver (choose the type of database you need), Flyway (if you have database migration schemas), SmallRye Health (optional for Health Monitoring)__

The list does not include all dependencies we need. We will add them to our project later. So for now generate the application with these dependencies.

== Entities

There is nothing special to consider when creating the entities. You can simply copy the code from your Spring application to create your entity classes. Usually, the entities extend a superclass `ApplicationPersistenceEntity` containing for example the `id` property. You can also copy this class.

== Transfer objects

The next step is to create the appropriate transfer objects for the entities. In a devon4j Spring application, we would use CobiGen to create these classes. Since CobiGen is not usable for this purpose in Quarkus applications yet, we have to create the classes manually.

We use some base classes from the module `devon4j-basic` the transfer objects extend from, so we need to add this module to our dependencies.

.**pom.xml**
[source,xml]
--------
<dependency>
  <groupId>com.devonfw.java.modules</groupId>
  <artifactId>devon4j-basic</artifactId>
  <version>2021.04.003</version>
</dependency>
--------

First we create abstract base classes for the search criteria and dto classes. Normally these would also be created by CobiGen.

.**AbstractSearchCriteriaTo**
[source,java]
----
public abstract class AbstractSearchCriteriaTo extends AbstractTo {

  private static final long serialVersionUID = 1L;

  private Pageable pageable;

  //getter + setter for pageable
}
----

.**AbstractDto**
[source,java]
----
public abstract class AbstractDto extends AbstractTo {

  private static final long serialVersionUID = 1L;

  private Long id;

  private int modificationCounter;

  public AbstractDto() {

    super();
  }

  //getter + setter

  @Override
  protected void toString(StringBuilder buffer) {
    ...
  }
}
----

Now you can again simply copy the code of the transfer objects from the Spring application to the Quarkus application. For Quarkus, we suggest to use `*Dto` instead of `*Eto` classes. So change the name of the classes accordingly.

== Data Access Layer

In devon4j, we propose to use link:guide-repository.asciidoc[Spring Data JPA] for Spring applications to build the data access layer using repositories. We can also use this approach for Quarkus applications, but we need to change the implementation because the devon4j modules used will not work in the Quarkus application. So for this issue, more changes are required and we can't just copy the code.

First, create a repository interface for your entity class that extends `JpaRepository` (see link:guide-repository.asciidoc#repository[here]).

To implement link:guide-jpa-query.asciidoc#dynamic-queries[dynamic queries], we will use QueryDSL. To do this, add the following dependencies to your pom.xml file.

.**pom.xml**
[source,xml]
--------
<dependency>
  <groupId>com.querydsl</groupId>
  <artifactId>querydsl-jpa</artifactId>
  <version>4.3.1</version>
</dependency>
<dependency>
  <groupId>com.querydsl</groupId>
  <artifactId>querydsl-apt</artifactId>
  <scope>provided</scope>
  <version>4.3.1</version>
</dependency>
--------

And add the QueryDSL annotation processor to your plugins.

.**pom.xml**
[source,xml]
--------
<plugins>
...
  <plugin>
    <groupId>com.mysema.maven</groupId>
    <artifactId>apt-maven-plugin</artifactId>
    <version>1.1.3</version>
    <executions>
      <execution>
        <phase>generate-sources</phase>
        <goals>
          <goal>process</goal>
        </goals>
        <configuration>
          <outputDirectory>target/generated-sources/annotations</outputDirectory>
          <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
        </configuration>
      </execution>
    </executions>
  </plugin>
</plugins>
--------

To implement the queries, follow the link:guide-jpa-query.asciidoc#dynamic-queries[corresponding guide].

Set the following properties in the application.properties file to configure the connection to your database (see also link:quarkus/guide-quarkus-configuration.asciidoc#database-configuration[here]):

[source, properties]
----
quarkus.datasource.db-kind=...
quarkus.datasource.jdbc.url=...
quarkus.datasource.username=...
quarkus.datasource.password=...
----

== Logic Layer

For the logic layer, devon4j uses a link:guide-usecase.asciidoc[use-case approach]. You can reuse the use case interfaces from the api module of the Spring application. Again, make sure to rename the transfer objects.

Create the appropriate class that implements the interface. Follow the link:guide-usecase.asciidoc#implementation[implementation section] of the use-case guide to implement the methods. For mapping the entities to the corresponding transfer objects, see the next section.

== Mapping

For bean mapping, we need to use a completely different approach in the Quarkus application than in the Spring application. For Quarkus, we use MapStruct, which creates the mapper at build time rather than at runtime using reflection. Add the following dependencies to your pom.xml.

.**pom.xml**
[source,xml]
--------
<dependency>
  <groupId>org.mapstruct</groupId>
  <artifactId>mapstruct-processor</artifactId>
  <version>1.4.2.Final</version>
</dependency>
<dependency>
  <groupId>org.mapstruct</groupId>
  <artifactId>mapstruct</artifactId>
  <version>1.4.2.Final</version>
</dependency>
--------

Then you can create the mapper as follows:

.**Mapper**
[source,java]
----
@Mapper(componentModel = "cdi")
public interface YourEntityMapper {
  YourEntityDto map(YourEntity entity);

  YourEntity map(YourEntityDto dto);
  
  ...
}
----

Inject the mapper into your use-case implementation and simply use the methods. The method implementations of the mapper are created when the application is built.

== Service Layer

For the implementation of the service layer, we use the link:guide-rest#jax-rs[JAX-RS] for both Quarkus and Spring applications to create the REST services. Classic devon4j Spring applications rely on Apache CFX as the implemention of JAX-RS. For Quarkus, we use RESTEasy. Since both are implementations of JAX-RS, much of the Spring application code can be reused.

Take the definition of the REST endpoints from the api module of the Spring application (make sure to rename the transfer objects), inject the use-cases from the logic layer and use them in the REST service methods as follows:

.**REST service**
[source,java]
----
@Path("/path/v1")
public class YourComponentRestService {

  @Inject
  UcFindYourEntity ucFindYourEntity;

  @Inject
  UcManageYourEntity ucManageYourEntity;

  @GET
  @Path("/yourEntity/{id}/")
  public YourEntityDto getYourEntity(@PathParam("id") long id);

    return this.ucFindYourEntity.findYourEntity(id);
  }

  ...
}
----

== Summary

As you have seen, some parts hardly differ when migrating a Spring application to a Quarkus application, while other parts differ more. The above sections describe the parts needed for simple applications that provide REST services with a data access layer. If you add more functionality, more customization and other frameworks/dependencies may be required. If that is the case, take a look at the corresponding guide on the topic in the devon4j documentation or check if there is a tutorial on the official https://quarkus.io/guides/[Quarkus website].

Furthermore, we can summarize that migrating from a Spring application to a Quarkus representative is not complex. Although Quarkus is a very young framework (release 1.0 was in 2019), it brings a lot of proven startards and libraries that you can integrate into your application. This makes it easy to migrate and reuse code from existing (Spring) applications. Also, Quarkus comes with Spring API compatibility for many Spring modules (https://quarkus.io/guides/spring-data-jpa[Spring Data JPA], https://quarkus.io/guides/spring-di[Spring DI], https://github.com/quarkusio/quarkus/tree/main/extensions[etc.]), which makes it easier for developers to reuse their knowledge.

Other benefits of using Quarkus include fast recompilation (live coding) and startup times, which optimize the development process without wasting time on processes such as building the application after each change. There is also a big difference in resource consumption between Spring and Quarkus applications. Especially in native mode, the memory footprint of a Quarkus application is extremely low, which can be a deciding factor in real-world environments. The tables <<PerformanceComparisonApplication1>> and <<PerformanceComparisonApplication2>>, which show the startup and memory consumption of two applications that are similar in their Quarkus and Spring implementations, illustrate this point. Application 1 is more complex in scope than Application 2 and uses more dependencies. The listings above the tables show the functions/extensions of the applications and the lines of code.

.Application 1:
* LOC
** Quarkus: ~4600
** Spring: ~ 5500
* Features
** 3 entitites
** REST service
** Connection to a Postgres database (using Spring Data JPA and QueryDSL for the repository implementation)
** Flyway for database migration
** Kafka for asynchronous messaging
** Avro for data serialization combinded with a schema registry

.performace comparision application 1
[#PerformanceComparisonApplication1]
[cols="1,1,1,1"]
|===
|
|Spring 
|Quarkus JVM Mode
|Quarkus Native Mode

|startup time (time until first response)
|~35 seconds (+/- 1s)
|~4,7 - 5,2 seconds
|~0,9 seconds

|memory usage
|~850 - 900 MB
|~550 MB
|~190 MB
|===

.Application 2:
* LOC
** Quarkus: ~300
** Spring: ~ 280
* Features
** 1 entity
** REST service with Postgres database connection

.performace comparision application 2
[#PerformanceComparisonApplication2]
[cols="1,1,1,1"]
|===
|
|Spring 
|Quarkus JVM Mode
|Quarkus Native Mode

|startup time (time until first response)
|~9 - 10 seconds
|~3,9 seconds
|~0,9 seconds

|memory usage
|~810 MB
|~460 MB
|~90 MB
|===

== Migration Toolkit from Red Hat
Red Hat provides a migration toolkit (https://developers.redhat.com/products/mta/overview[MTA, Migration Toolkit for Applications]), that supports you migrating a Spring application to a Quarkus application. There are several versions of this toolkit (e.g., a web console, a Maven plugin, or an IDE plugin). The MTA analyzes your existing application and generates a report with hints and instructions for migrating from Spring to Quarkus. For example, it gives you an indication of which dependencies are not supported in your project for a Quarkus application and which dependencies you need to swap them with. The analysis is rule-based, and you can also add your own rules that will be checked during analysis.